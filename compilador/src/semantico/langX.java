/* Generated By:JavaCC: Do not edit this line. langX.java */
package semantico;

import java.io.File;
import java.io.FileInputStream;


public class langX implements langXConstants {

    public static SemanticAnalyzer semantic;
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
    }

    final private int[] jj_la1 = new int[30];
    /**
     * Generated Token Manager.
     */
    public langXTokenManager token_source;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    boolean eof;
    boolean debug_recovery = true;
    int contParserError = 0;
    SimpleCharStream jj_input_stream;
    private int jj_ntk;
    private int jj_gen;
    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int trace_indent = 0;
    private boolean trace_enabled = true;

    /**
     * Constructor with InputStream.
     */
    public langX(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public langX(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new langXTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor.
     */
    public langX(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new langXTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor with generated Token Manager.
     */
    public langX(langXTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    }

    public static void _start(String args) throws Exception {
        if (foundLexicalErrors(args)) return;

        semantic = new SemanticAnalyzer();
        semantic.execute = false;
        File file = new File(args);
        FileInputStream fis = null;
        langX parser;
        boolean debug_as = true;

        try {
            fis = new FileInputStream(file);
            parser = new langX(fis);
            if (!debug_as) parser.disable_tracing();
            try {
                parser.programa();
            } catch (ParseException e) {
                ErrorManager.addErroSintatico(e, "Nao Tratado");
            }
        } catch (java.io.FileNotFoundException e) {
            throw new Exception("Arquivo nao encontrado: " + e.getMessage());
        } finally {
            try {
                if (fis != null)
                    fis.close();
            } catch (Exception e) {
                throw new Exception("Erro ao fechar o arquivo: " + e.getMessage());
            }
        }
    }

    public static void _runSemantic(String args) throws Exception {
        if (foundLexicalErrors(args)) return;

        semantic = new SemanticAnalyzer();
        semantic.execute = true;
        File file = new File(args);
        FileInputStream fis = null;
        langX parser;
        boolean debug_as = true;

        try {
            fis = new FileInputStream(file);
            parser = new langX(fis);
            if (!debug_as) parser.disable_tracing();
            try {
                parser.programa();
            } catch (ParseException e) {
                ErrorManager.addErroSintatico(e, "Nao Tratado");
            }
        } catch (java.io.FileNotFoundException e) {
            throw new Exception("Arquivo nao encontrado: " + e.getMessage());
        } finally {
            try {
                if (fis != null)
                    fis.close();
            } catch (Exception e) {
                throw new Exception("Erro ao fechar o arquivo: " + e.getMessage());
            }
        }
    }

    static Boolean foundLexicalErrors(String args) throws Exception {

        File file = new File(args);
        FileInputStream fis = null;
        langX parser;
        Boolean result = false;

        try {
            fis = new FileInputStream(file);
            parser = new langX(fis);
            parser._testeLexico();
            result = parser.token_source.foundLexError() > 0;
        } catch (java.io.FileNotFoundException e) {
            throw new Exception("Arquivo nao encontrado: " + e.getMessage());
        } catch (ParseException e) {
            throw new Exception("Erro Parser: " + e.getMessage());
        } finally {
            try {
                if (fis != null)
                    fis.close();
            } catch (Exception e) {
                throw new Exception("Erro ao fechar o arquivo: " + e.getMessage());
            }
        }
        return result;
    }

    static public String im(int x) {
        int k;
        String s;
        s = tokenImage[x];
        k = s.lastIndexOf("\u005c"");
        try {
            s = s.substring(1, k);
        } catch (StringIndexOutOfBoundsException e) {
        }
        return s;
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0xffffffc0, 0xffffffc0, 0x200, 0x400, 0xa000, 0x0, 0x10000, 0x0, 0x10000, 0x0, 0x0, 0x0, 0x1e0000, 0x0, 0xa6a00000, 0xa6a00000, 0x82000000, 0x0, 0x0, 0x18000000, 0x8000000, 0x10000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18000000,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0xe0fffffd, 0xe0fffffd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x20, 0x400000, 0x0, 0xe0000000, 0x0, 0x0, 0x0, 0x20, 0xe0000000, 0x0, 0x0, 0x0, 0x3f00, 0x3f00, 0x8006, 0x8006, 0x2040c8, 0x2040c8, 0x10, 0xe0410000,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x1, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,};
    }

    void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseException {
        Token tok;
        if (debug_recovery) {
            System.out.println();
            System.out.println("*** " + met + " ***");
            System.out.println("Synchronizing Set: " + g);
        }
        if (g == null) throw e;
        tok = getToken(1);

        while (!eof) {
            if (g.contains(tok.kind)) {
                if (debug_recovery) {
                    System.out.println("Found synchronizing token: " + im(tok.kind));
                }
                break;
            }
            if (debug_recovery) {
                System.out.println("Ignoring token: " + im(tok.kind));
            }
            getNextToken();
            tok = getToken(1);
            if (tok.kind == EOF && !g.contains(EOF)) {
                eof = true;
            }
        }

        System.out.println(e.getMessage());
        contParserError++;
        if (eof) throw new ParseException("EOF Found prematurely.");
    }

    //Teste do analizador l√©xico
    final public void _testeLexico() throws ParseException {
        trace_call("_testeLexico");
        try {
            label_1:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case PROGRAM:
                    case THIS:
                    case EXECUTE:
                    case PURPOSE:
                    case DECLARE:
                    case TYPE:
                    case IS:
                    case CONSTANT:
                    case AND:
                    case VARIABLE:
                    case AS:
                    case INTEGER:
                    case REAL:
                    case STRING:
                    case LOGIC:
                    case ASSIGN:
                    case TO:
                    case ACQUIRE:
                    case WRITE:
                    case SHOW:
                    case CARRY:
                    case TRUE:
                    case UNTRUE:
                    case CHECK:
                    case RESULT:
                    case PUT:
                    case OUT:
                    case SUBTRACAO:
                    case MULTIPLICACAO:
                    case POTENCIA:
                    case VIRGULA:
                    case DIV_INTEIRA:
                    case RESTO_DIV_INTEIRA:
                    case IGUAL:
                    case DIFERENTE:
                    case MENOR:
                    case MAIOR:
                    case MENOR_IGUAL:
                    case MAIOR_IGUAL:
                    case E:
                    case OU:
                    case NAO:
                    case LBRACKET:
                    case RBRACKET:
                    case EQUALS:
                    case DOT:
                    case SLASH:
                    case LPAREN:
                    case RPAREN:
                    case CONSTANTE_INTEIRA:
                    case CONSTANTE_REAL:
                    case CONSTANTE_LITERAL:
                    case IDENTIFICADOR:
                        ;
                        break;
                    default:
                        jj_la1[0] = jj_gen;
                        break label_1;
                }
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case PROGRAM:
                        jj_consume_token(PROGRAM);
                        break;
                    case THIS:
                        jj_consume_token(THIS);
                        break;
                    case EXECUTE:
                        jj_consume_token(EXECUTE);
                        break;
                    case PURPOSE:
                        jj_consume_token(PURPOSE);
                        break;
                    case DECLARE:
                        jj_consume_token(DECLARE);
                        break;
                    case TYPE:
                        jj_consume_token(TYPE);
                        break;
                    case IS:
                        jj_consume_token(IS);
                        break;
                    case CONSTANT:
                        jj_consume_token(CONSTANT);
                        break;
                    case AND:
                        jj_consume_token(AND);
                        break;
                    case VARIABLE:
                        jj_consume_token(VARIABLE);
                        break;
                    case AS:
                        jj_consume_token(AS);
                        break;
                    case INTEGER:
                        jj_consume_token(INTEGER);
                        break;
                    case REAL:
                        jj_consume_token(REAL);
                        break;
                    case STRING:
                        jj_consume_token(STRING);
                        break;
                    case LOGIC:
                        jj_consume_token(LOGIC);
                        break;
                    case ASSIGN:
                        jj_consume_token(ASSIGN);
                        break;
                    case TO:
                        jj_consume_token(TO);
                        break;
                    case ACQUIRE:
                        jj_consume_token(ACQUIRE);
                        break;
                    case WRITE:
                        jj_consume_token(WRITE);
                        break;
                    case SHOW:
                        jj_consume_token(SHOW);
                        break;
                    case CARRY:
                        jj_consume_token(CARRY);
                        break;
                    case TRUE:
                        jj_consume_token(TRUE);
                        break;
                    case UNTRUE:
                        jj_consume_token(UNTRUE);
                        break;
                    case PUT:
                        jj_consume_token(PUT);
                        break;
                    case OUT:
                        jj_consume_token(OUT);
                        jj_consume_token(SOMA);
                        break;
                    case SUBTRACAO:
                        jj_consume_token(SUBTRACAO);
                        break;
                    case MULTIPLICACAO:
                        jj_consume_token(MULTIPLICACAO);
                        break;
                    case POTENCIA:
                        jj_consume_token(POTENCIA);
                        break;
                    case DIV_INTEIRA:
                        jj_consume_token(DIV_INTEIRA);
                        break;
                    case RESTO_DIV_INTEIRA:
                        jj_consume_token(RESTO_DIV_INTEIRA);
                        break;
                    case IGUAL:
                        jj_consume_token(IGUAL);
                        break;
                    case DIFERENTE:
                        jj_consume_token(DIFERENTE);
                        break;
                    case MENOR:
                        jj_consume_token(MENOR);
                        break;
                    case MAIOR:
                        jj_consume_token(MAIOR);
                        break;
                    case MENOR_IGUAL:
                        jj_consume_token(MENOR_IGUAL);
                        break;
                    case MAIOR_IGUAL:
                        jj_consume_token(MAIOR_IGUAL);
                        break;
                    case E:
                        jj_consume_token(E);
                        break;
                    case OU:
                        jj_consume_token(OU);
                        break;
                    case NAO:
                        jj_consume_token(NAO);
                        break;
                    case LBRACKET:
                        jj_consume_token(LBRACKET);
                        break;
                    case RBRACKET:
                        jj_consume_token(RBRACKET);
                        break;
                    case EQUALS:
                        jj_consume_token(EQUALS);
                        break;
                    case DOT:
                        jj_consume_token(DOT);
                        break;
                    case SLASH:
                        jj_consume_token(SLASH);
                        break;
                    case LPAREN:
                        jj_consume_token(LPAREN);
                        break;
                    case RPAREN:
                        jj_consume_token(RPAREN);
                        break;
                    case VIRGULA:
                        jj_consume_token(VIRGULA);
                        break;
                    case CONSTANTE_INTEIRA:
                        jj_consume_token(CONSTANTE_INTEIRA);
                        break;
                    case CONSTANTE_REAL:
                        jj_consume_token(CONSTANTE_REAL);
                        break;
                    case CONSTANTE_LITERAL:
                        jj_consume_token(CONSTANTE_LITERAL);
                        break;
                    case IDENTIFICADOR:
                        jj_consume_token(IDENTIFICADOR);
                        break;
                    case CHECK:
                        jj_consume_token(CHECK);
                        break;
                    case RESULT:
                        jj_consume_token(RESULT);
                        break;
                    default:
                        jj_la1[1] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            jj_consume_token(0);
        } finally {
            trace_return("_testeLexico");
        }
    }

    // ********************************************************************************************************************
// M2 - Sint√°tico *****************************************************************************************************
// M3 - Sem√¢ntico *****************************************************************************************************
// ********************************************************************************************************************
    final public void programa() throws ParseException, ParseEOFException {
        trace_call("programa");
        try {
            RecoverySet h = First.header;
            RecoverySet d = First.declaration;
            RecoverySet b = First.body;
            RecoverySet c = First.comentario;
            try_call_header(h);
            header(d.union(b));
            declaracao(b, c);
        } finally {
            trace_return("programa");
        }
    }

    // ------------------------------------------------------------------ comentario
    final public void comentario() throws ParseException {
        trace_call("comentario");
        try {
            RecoverySet eof = new RecoverySet(EOF);
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case PURPOSE:
                        jj_consume_token(PURPOSE);
                        jj_consume_token(CONSTANTE_LITERAL);
                        break;
                    default:
                        jj_la1[2] = jj_gen;
                        ;
                }
            } catch (ParseException ex) {
                ErrorManager.addErroSintatico(ex, "purpose coment\u00e1rio");
                consumeUntil(eof, ex, "comentario");
            } finally {
                try_call_eof(eof);
            }
        } finally {
            trace_return("comentario");
        }
    }

    final public void try_call_eof(RecoverySet eof) throws ParseException {
        trace_call("try_call_eof");
        try {
            try {
                jj_consume_token(0);
                semantic.action2();
            } catch (ParseException ex) {
                ErrorManager.addErroSintatico(ex, "try_call_eof");
                consumeUntil(eof, ex, "try_call_eof");
                try_call_eof(eof);
            }
        } finally {
            trace_return("try_call_eof");
        }
    }

    // ------------------------------------------------------------------ header
    final public void try_call_header(RecoverySet h) throws ParseException {
        trace_call("try_call_header");
        try {
            try {
                jj_consume_token(PROGRAM);
            } catch (ParseException ex) {
                ErrorManager.addErroSintatico(ex, "try_call_header");
                consumeUntil(h, ex, "try_call_header");
                try_call_header(h);
            }
        } finally {
            trace_return("try_call_header");
        }
    }

    final public void header(RecoverySet db) throws ParseException {
        trace_call("header");
        try {
            try {
                jj_consume_token(IDENTIFICADOR);
                semantic.action1(token.image);
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
            } catch (ParseException ex) {
                ErrorManager.addErroSintatico(ex, "header");
                consumeUntil(db, ex, "header");
            }
        } finally {
            trace_return("header");
        }
    }

    //--------------------------------------------------------------- declara√ß√µes
    final public void declaracao(RecoverySet b, RecoverySet c) throws ParseException {
        trace_call("declaracao");
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case DECLARE:
                        jj_consume_token(DECLARE);
                        jj_consume_token(THIS);
                        jj_consume_token(LBRACKET);
                        constantesEVariaveis();
                        jj_consume_token(RBRACKET);
                        break;
                    default:
                        jj_la1[3] = jj_gen;
                        ;
                }
            } catch (ParseException ex) {
                ErrorManager.addErroSintatico(ex, "declare");
                consumeUntil(b, ex, "declaracao");
                //body(c);
                //return;

            } finally {
                try_call_body(b);
                body(c);
            }
        } finally {
            trace_return("declaracao");
        }
    }

    final public void constantesEVariaveis() throws ParseException {
        trace_call("constantesEVariaveis");
        try {
            jj_consume_token(AS);
            constantesEVariaveis_();
        } finally {
            trace_return("constantesEVariaveis");
        }
    }

    final public void constantesEVariaveis_() throws ParseException {
        trace_call("constantesEVariaveis_");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CONSTANT:
                    declaracaoDeConstantes();
                    variaveis__();
                    break;
                case VARIABLE:
                    declaracaoDeVariaveis();
                    constantes__();
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            trace_return("constantesEVariaveis_");
        }
    }

    ////---------------------------------------------------------- constantes
    final public void declaracaoDeConstantes() throws ParseException {
        trace_call("declaracaoDeConstantes");
        try {
            jj_consume_token(CONSTANT);
            semantic.action5();
            constantes();
        } finally {
            trace_return("declaracaoDeConstantes");
        }
    }

    final public void constantes() throws ParseException {
        trace_call("constantes");
        try {
            listaDeIdentificadoresDeConstantes();
            jj_consume_token(EQUALS);
            tipo();
            semantic.action6();
            jj_consume_token(EQUALS);
            valor();
            semantic.action7(token);
            jj_consume_token(DOT);
            constantes_();
        } finally {
            trace_return("constantes");
        }
    }

    final public void constantes_() throws ParseException {
        trace_call("constantes_");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IDENTIFICADOR:
                    constantes();
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    ;
            }
        } finally {
            trace_return("constantes_");
        }
    }

    final public void constantes__() throws ParseException {
        trace_call("constantes__");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case AS:
                    jj_consume_token(AS);
                    declaracaoDeConstantes();
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    ;
            }
        } finally {
            trace_return("constantes__");
        }
    }

    ////---------------------------------------------------------- vari√°veis
    final public void declaracaoDeVariaveis() throws ParseException {
        trace_call("declaracaoDeVariaveis");
        try {
            jj_consume_token(VARIABLE);
            semantic.action8();
            variaveis();
        } finally {
            trace_return("declaracaoDeVariaveis");
        }
    }

    final public void variaveis() throws ParseException {
        trace_call("variaveis");
        try {
            listaDeIdentificadoresDeVariaveis();
            jj_consume_token(EQUALS);
            tipo();
            semantic.action6();
            jj_consume_token(DOT);
            variaveis_();
        } finally {
            trace_return("variaveis");
        }
    }

    final public void variaveis_() throws ParseException {
        trace_call("variaveis_");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IDENTIFICADOR:
                    variaveis();
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    ;
            }
        } finally {
            trace_return("variaveis_");
        }
    }

    final public void variaveis__() throws ParseException {
        trace_call("variaveis__");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case AS:
                    jj_consume_token(AS);
                    declaracaoDeVariaveis();
                    break;
                default:
                    jj_la1[8] = jj_gen;
                    ;
            }
        } finally {
            trace_return("variaveis__");
        }
    }

    ////---------------------------------------------------------- listas
    final public void listaDeIdentificadoresDeConstantes() throws ParseException {
        trace_call("listaDeIdentificadoresDeConstantes");
        try {
            jj_consume_token(IDENTIFICADOR);
            semantic.action9(token.image);
            listaDeIdentificadoresDeConstantes_();
        } finally {
            trace_return("listaDeIdentificadoresDeConstantes");
        }
    }

    final public void listaDeIdentificadoresDeConstantes_() throws ParseException {
        trace_call("listaDeIdentificadoresDeConstantes_");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VIRGULA:
                    jj_consume_token(VIRGULA);
                    listaDeIdentificadoresDeConstantes();
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    ;
            }
        } finally {
            trace_return("listaDeIdentificadoresDeConstantes_");
        }
    }

    final public void listaDeIdentificadoresDeVariaveis() throws ParseException {
        trace_call("listaDeIdentificadoresDeVariaveis");
        try {
            jj_consume_token(IDENTIFICADOR);
            semantic.action10(token.image);
            indice();
            semantic.action11();
            listaDeIdentificadoresDeVariaveis_();
        } finally {
            trace_return("listaDeIdentificadoresDeVariaveis");
        }
    }

    final public void listaDeIdentificadoresDeVariaveis_() throws ParseException {
        trace_call("listaDeIdentificadoresDeVariaveis_");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VIRGULA:
                    jj_consume_token(VIRGULA);
                    listaDeIdentificadoresDeVariaveis();
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    ;
            }
        } finally {
            trace_return("listaDeIdentificadoresDeVariaveis_");
        }
    }

    ////---------------------------------------------------------- indice, tipo, valor
    final public void indice() throws ParseException {
        trace_call("indice");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LPAREN:
                    jj_consume_token(LPAREN);
                    jj_consume_token(CONSTANTE_INTEIRA);
                    semantic.action12(token.image);
                    jj_consume_token(RPAREN);
                    break;
                default:
                    jj_la1[11] = jj_gen;
                    ;
            }
        } finally {
            trace_return("indice");
        }
    }

    final public void tipo() throws ParseException {
        trace_call("tipo");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER:
                    jj_consume_token(INTEGER);
                    semantic.action13();
                    break;
                case REAL:
                    jj_consume_token(REAL);
                    semantic.action14();
                    break;
                case STRING:
                    jj_consume_token(STRING);
                    semantic.action15();
                    break;
                case LOGIC:
                    jj_consume_token(LOGIC);
                    semantic.action16();
                    break;
                case IDENTIFICADOR:
                    jj_consume_token(IDENTIFICADOR);
                    semantic.action17();
                    break;
                default:
                    jj_la1[12] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            trace_return("tipo");
        }
    }

    final public void valor() throws ParseException {
        trace_call("valor");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CONSTANTE_INTEIRA:
                    jj_consume_token(CONSTANTE_INTEIRA);
                    break;
                case CONSTANTE_REAL:
                    jj_consume_token(CONSTANTE_REAL);
                    break;
                case CONSTANTE_LITERAL:
                    jj_consume_token(CONSTANTE_LITERAL);
                    break;
                default:
                    jj_la1[13] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            trace_return("valor");
        }
    }

    // ------------------------------------------------------------------ corpo do programa
    final public void try_call_body(RecoverySet b) throws ParseException {
        trace_call("try_call_body");
        try {
            try {
                jj_consume_token(EXECUTE);
                jj_consume_token(THIS);
            } catch (ParseException ex) {
                ErrorManager.addErroSintatico(ex, "try_call_body");
                consumeUntil(b, ex, "try_call_body");
                try_call_body(b);
            }
        } finally {
            trace_return("try_call_body");
        }
    }

    final public void body(RecoverySet c) throws ParseException {
        trace_call("body");
        try {
            try {
                jj_consume_token(LBRACKET);
                listaDeComandos();
                jj_consume_token(RBRACKET);
            } catch (ParseException ex) {
                ErrorManager.addErroSintatico(ex, "body");
                consumeUntil(c, ex, "body");
            } finally {
                comentario();
            }
        } finally {
            trace_return("body");
        }
    }

    // ------------------------------------------------------------------ Comandos
    final public void listaDeComandos() throws ParseException {
        trace_call("listaDeComandos");
        try {
            comando();
            listaDeComandos_();
        } finally {
            trace_return("listaDeComandos");
        }
    }

    final public void comando() throws ParseException {
        trace_call("comando");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ASSIGN:
                    atribuicao();
                    break;
                case ACQUIRE:
                    entrada();
                    break;
                case SHOW:
                case PUT:
                    saida();
                    break;
                case CHECK:
                    selecao();
                    break;
                case CARRY:
                    repeticao();
                    break;
                default:
                    jj_la1[14] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            trace_return("comando");
        }
    }

    final public void listaDeComandos_() throws ParseException {
        trace_call("listaDeComandos_");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ASSIGN:
                case ACQUIRE:
                case SHOW:
                case CARRY:
                case CHECK:
                case PUT:
                    listaDeComandos();
                    break;
                default:
                    jj_la1[15] = jj_gen;
                    ;
            }
        } finally {
            trace_return("listaDeComandos_");
        }
    }

    final public void atribuicao() throws ParseException {
        trace_call("atribuicao");
        try {
            jj_consume_token(ASSIGN);
            jj_consume_token(THIS);
            semantic.action18();
            listaDeIdentificadoresDeVariaveis();
            jj_consume_token(MAIOR);
            expressao();
            semantic.action19();
            jj_consume_token(DOT);
        } finally {
            trace_return("atribuicao");
        }
    }

    final public void entrada() throws ParseException {
        trace_call("entrada");
        try {
            jj_consume_token(ACQUIRE);
            jj_consume_token(THIS);
            semantic.action20();
            jj_consume_token(LBRACKET);
            listaDeIdentificadoresDeVariaveis();
            jj_consume_token(RBRACKET);
            jj_consume_token(DOT);
        } finally {
            trace_return("entrada");
        }
    }

    final public void saida() throws ParseException {
        trace_call("saida");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SHOW:
                    jj_consume_token(SHOW);
                    jj_consume_token(THIS);
                    semantic.action21();
                    jj_consume_token(LBRACKET);
                    listaDeIdentificadoresEOuConstantes();
                    jj_consume_token(RBRACKET);
                    jj_consume_token(DOT);
                    break;
                case PUT:
                    jj_consume_token(PUT);
                    jj_consume_token(THIS);
                    semantic.action22();
                    jj_consume_token(LBRACKET);
                    listaDeIdentificadoresEOuConstantes();
                    jj_consume_token(RBRACKET);
                    jj_consume_token(DOT);
                    break;
                default:
                    jj_la1[16] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            trace_return("saida");
        }
    }

    final public void listaDeIdentificadoresEOuConstantes() throws ParseException {
        trace_call("listaDeIdentificadoresEOuConstantes");
        try {
            item();
            semantic.action23();
            listaDeIdentificadoresEOuConstantes_();
        } finally {
            trace_return("listaDeIdentificadoresEOuConstantes");
        }
    }

    final public void listaDeIdentificadoresEOuConstantes_() throws ParseException {
        trace_call("listaDeIdentificadoresEOuConstantes_");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VIRGULA:
                    jj_consume_token(VIRGULA);
                    listaDeIdentificadoresEOuConstantes();
                    break;
                default:
                    jj_la1[17] = jj_gen;
                    ;
            }
        } finally {
            trace_return("listaDeIdentificadoresEOuConstantes_");
        }
    }

    final public void item() throws ParseException {
        trace_call("item");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IDENTIFICADOR:
                    jj_consume_token(IDENTIFICADOR);
                    semantic.action24(token.image);
                    indice();
                    semantic.action25();
                    break;
                case CONSTANTE_INTEIRA:
                    jj_consume_token(CONSTANTE_INTEIRA);
                    semantic.action26(token.image);
                    break;
                case CONSTANTE_REAL:
                    jj_consume_token(CONSTANTE_REAL);
                    semantic.action27(token.image);
                    break;
                case CONSTANTE_LITERAL:
                    jj_consume_token(CONSTANTE_LITERAL);
                    semantic.action28(token.image);
                    break;
                default:
                    jj_la1[18] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            trace_return("item");
        }
    }

    final public void selecao() throws ParseException {
        trace_call("selecao");
        try {
            jj_consume_token(CHECK);
            jj_consume_token(THIS);
            expressao();
            selecao_();
            semantic.action29();
        } finally {
            trace_return("selecao");
        }
    }

    final public void selecao_() throws ParseException {
        trace_call("selecao_");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case TRUE:
                    jj_consume_token(TRUE);
                    jj_consume_token(RESULT);
                    semantic.action30();
                    jj_consume_token(LBRACKET);
                    listaDeComandos();
                    jj_consume_token(RBRACKET);
                    falsa();
                    jj_consume_token(DOT);
                    break;
                case UNTRUE:
                    jj_consume_token(UNTRUE);
                    jj_consume_token(RESULT);
                    semantic.action31();
                    jj_consume_token(LBRACKET);
                    listaDeComandos();
                    jj_consume_token(RBRACKET);
                    verdadeira();
                    jj_consume_token(DOT);
                    break;
                default:
                    jj_la1[19] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            trace_return("selecao_");
        }
    }

    final public void verdadeira() throws ParseException {
        trace_call("verdadeira");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case TRUE:
                    jj_consume_token(TRUE);
                    jj_consume_token(RESULT);
                    semantic.action32();
                    jj_consume_token(LBRACKET);
                    listaDeComandos();
                    jj_consume_token(RBRACKET);
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    ;
            }
        } finally {
            trace_return("verdadeira");
        }
    }

    final public void falsa() throws ParseException {
        trace_call("falsa");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case UNTRUE:
                    jj_consume_token(UNTRUE);
                    jj_consume_token(RESULT);
                    semantic.action32();
                    jj_consume_token(LBRACKET);
                    listaDeComandos();
                    jj_consume_token(RBRACKET);
                    break;
                default:
                    jj_la1[21] = jj_gen;
                    ;
            }
        } finally {
            trace_return("falsa");
        }
    }

    final public void repeticao() throws ParseException {
        trace_call("repeticao");
        try {
            jj_consume_token(CARRY);
            jj_consume_token(OUT);
            jj_consume_token(THIS);
            semantic.action33();
            expressao();
            semantic.action34();
            jj_consume_token(LBRACKET);
            listaDeComandos();
            jj_consume_token(RBRACKET);
            semantic.action35();
            jj_consume_token(DOT);
        } finally {
            trace_return("repeticao");
        }
    }

    // ------------------------------------------------------------------ expressao
    final public void expressao() throws ParseException {
        trace_call("expressao");
        try {
            expressaoAritmeticaOuLogica();
            expressao_();
        } finally {
            trace_return("expressao");
        }
    }

    final public void expressao_() throws ParseException {
        trace_call("expressao_");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IGUAL:
                case DIFERENTE:
                case MENOR:
                case MAIOR:
                case MENOR_IGUAL:
                case MAIOR_IGUAL:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case IGUAL:
                            jj_consume_token(IGUAL);
                            expressaoAritmeticaOuLogica();
                            semantic.action36();
                            break;
                        case DIFERENTE:
                            jj_consume_token(DIFERENTE);
                            expressaoAritmeticaOuLogica();
                            semantic.action37();
                            break;
                        case MENOR:
                            jj_consume_token(MENOR);
                            expressaoAritmeticaOuLogica();
                            semantic.action38();
                            break;
                        case MAIOR:
                            jj_consume_token(MAIOR);
                            expressaoAritmeticaOuLogica();
                            semantic.action39();
                            break;
                        case MENOR_IGUAL:
                            jj_consume_token(MENOR_IGUAL);
                            expressaoAritmeticaOuLogica();
                            semantic.action40();
                            break;
                        case MAIOR_IGUAL:
                            jj_consume_token(MAIOR_IGUAL);
                            expressaoAritmeticaOuLogica();
                            semantic.action41();
                            break;
                        default:
                            jj_la1[22] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[23] = jj_gen;
                    ;
            }
        } finally {
            trace_return("expressao_");
        }
    }

    final public void expressaoAritmeticaOuLogica() throws ParseException {
        trace_call("expressaoAritmeticaOuLogica");
        try {
            termo2();
            menorPrioridade();
        } finally {
            trace_return("expressaoAritmeticaOuLogica");
        }
    }

    final public void menorPrioridade() throws ParseException {
        trace_call("menorPrioridade");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SOMA:
                case SUBTRACAO:
                case OU:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case SOMA:
                            jj_consume_token(SOMA);
                            termo2();
                            menorPrioridade();
                            semantic.action42();
                            break;
                        case SUBTRACAO:
                            jj_consume_token(SUBTRACAO);
                            termo2();
                            menorPrioridade();
                            semantic.action43();
                            break;
                        case OU:
                            jj_consume_token(OU);
                            termo2();
                            menorPrioridade();
                            semantic.action44();
                            break;
                        default:
                            jj_la1[24] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[25] = jj_gen;
                    ;
            }
        } finally {
            trace_return("menorPrioridade");
        }
    }

    final public void termo2() throws ParseException {
        trace_call("termo2");
        try {
            termo1();
            mediaPrioridade();
        } finally {
            trace_return("termo2");
        }
    }

    final public void mediaPrioridade() throws ParseException {
        trace_call("mediaPrioridade");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case MULTIPLICACAO:
                case DIV_INTEIRA:
                case RESTO_DIV_INTEIRA:
                case E:
                case SLASH:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case MULTIPLICACAO:
                            jj_consume_token(MULTIPLICACAO);
                            termo1();
                            mediaPrioridade();
                            semantic.action45();
                            break;
                        case SLASH:
                            jj_consume_token(SLASH);
                            termo1();
                            mediaPrioridade();
                            semantic.action46();
                            break;
                        case DIV_INTEIRA:
                            jj_consume_token(DIV_INTEIRA);
                            termo1();
                            mediaPrioridade();
                            semantic.action47();
                            break;
                        case RESTO_DIV_INTEIRA:
                            jj_consume_token(RESTO_DIV_INTEIRA);
                            termo1();
                            mediaPrioridade();
                            semantic.action48();
                            break;
                        case E:
                            jj_consume_token(E);
                            termo1();
                            mediaPrioridade();
                            semantic.action49();
                            break;
                        default:
                            jj_la1[26] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[27] = jj_gen;
                    ;
            }
        } finally {
            trace_return("mediaPrioridade");
        }
    }

    final public void termo1() throws ParseException {
        trace_call("termo1");
        try {
            elemento();
            maiorPrioridade();
        } finally {
            trace_return("termo1");
        }
    }

    final public void maiorPrioridade() throws ParseException {
        trace_call("maiorPrioridade");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case POTENCIA:
                    jj_consume_token(POTENCIA);
                    elemento();
                    maiorPrioridade();
                    semantic.action50();
                    break;
                default:
                    jj_la1[28] = jj_gen;
                    ;
            }
        } finally {
            trace_return("maiorPrioridade");
        }
    }

    final public void elemento() throws ParseException {
        trace_call("elemento");
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IDENTIFICADOR:
                    jj_consume_token(IDENTIFICADOR);
                    semantic.action24(token.image);
                    indice();
                    semantic.action51();
                    break;
                case CONSTANTE_INTEIRA:
                    jj_consume_token(CONSTANTE_INTEIRA);
                    semantic.action26(token.image);
                    break;
                case CONSTANTE_REAL:
                    jj_consume_token(CONSTANTE_REAL);
                    semantic.action27(token.image);
                    break;
                case CONSTANTE_LITERAL:
                    jj_consume_token(CONSTANTE_LITERAL);
                    semantic.action28(token.image);
                    break;
                case TRUE:
                    jj_consume_token(TRUE);
                    semantic.action52();
                    break;
                case UNTRUE:
                    jj_consume_token(UNTRUE);
                    semantic.action53();
                    break;
                case LPAREN:
                    jj_consume_token(LPAREN);
                    expressao();
                    jj_consume_token(RPAREN);
                    break;
                case NAO:
                    jj_consume_token(NAO);
                    jj_consume_token(LPAREN);
                    expressao();
                    jj_consume_token(RPAREN);
                    semantic.action54();
                    break;
                default:
                    jj_la1[29] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            trace_return("elemento");
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(langXTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            trace_token(token, "");
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        trace_token(token, " (in getNextToken)");
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[74];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 30; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 74; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
        trace_enabled = true;
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
        trace_enabled = false;
    }

    private void trace_call(String s) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.println("Call:   " + s);
        }
        trace_indent = trace_indent + 2;
    }

    private void trace_return(String s) {
        trace_indent = trace_indent - 2;
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.println("Return: " + s);
        }
    }

    private void trace_token(Token t, String where) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.print("Consumed token: <" + tokenImage[t.kind]);
            if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
                System.out.print(": \"" + t.image + "\"");
            }
            System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
        }
    }

    private void trace_scan(Token t1, int t2) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.print("Visited token: <" + tokenImage[t1.kind]);
            if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
                System.out.print(": \"" + t1.image + "\"");
            }
            System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
        }
    }

}
