/* Generated By:JavaCC: Do not edit this line. langXConstants.java */
package semantico;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface langXConstants {

    /**
     * End of File.
     */
    int EOF = 0;
    /**
     * RegularExpression Id.
     */
    int PROGRAM = 6;
    /**
     * RegularExpression Id.
     */
    int THIS = 7;
    /**
     * RegularExpression Id.
     */
    int EXECUTE = 8;
    /**
     * RegularExpression Id.
     */
    int PURPOSE = 9;
    /**
     * RegularExpression Id.
     */
    int DECLARE = 10;
    /**
     * RegularExpression Id.
     */
    int TYPE = 11;
    /**
     * RegularExpression Id.
     */
    int IS = 12;
    /**
     * RegularExpression Id.
     */
    int CONSTANT = 13;
    /**
     * RegularExpression Id.
     */
    int AND = 14;
    /**
     * RegularExpression Id.
     */
    int VARIABLE = 15;
    /**
     * RegularExpression Id.
     */
    int AS = 16;
    /**
     * RegularExpression Id.
     */
    int INTEGER = 17;
    /**
     * RegularExpression Id.
     */
    int REAL = 18;
    /**
     * RegularExpression Id.
     */
    int STRING = 19;
    /**
     * RegularExpression Id.
     */
    int LOGIC = 20;
    /**
     * RegularExpression Id.
     */
    int ASSIGN = 21;
    /**
     * RegularExpression Id.
     */
    int TO = 22;
    /**
     * RegularExpression Id.
     */
    int ACQUIRE = 23;
    /**
     * RegularExpression Id.
     */
    int WRITE = 24;
    /**
     * RegularExpression Id.
     */
    int SHOW = 25;
    /**
     * RegularExpression Id.
     */
    int CARRY = 26;
    /**
     * RegularExpression Id.
     */
    int TRUE = 27;
    /**
     * RegularExpression Id.
     */
    int UNTRUE = 28;
    /**
     * RegularExpression Id.
     */
    int CHECK = 29;
    /**
     * RegularExpression Id.
     */
    int RESULT = 30;
    /**
     * RegularExpression Id.
     */
    int PUT = 31;
    /**
     * RegularExpression Id.
     */
    int OUT = 32;
    /**
     * RegularExpression Id.
     */
    int SOMA = 33;
    /**
     * RegularExpression Id.
     */
    int SUBTRACAO = 34;
    /**
     * RegularExpression Id.
     */
    int MULTIPLICACAO = 35;
    /**
     * RegularExpression Id.
     */
    int POTENCIA = 36;
    /**
     * RegularExpression Id.
     */
    int VIRGULA = 37;
    /**
     * RegularExpression Id.
     */
    int DIV_INTEIRA = 38;
    /**
     * RegularExpression Id.
     */
    int RESTO_DIV_INTEIRA = 39;
    /**
     * RegularExpression Id.
     */
    int IGUAL = 40;
    /**
     * RegularExpression Id.
     */
    int DIFERENTE = 41;
    /**
     * RegularExpression Id.
     */
    int MENOR = 42;
    /**
     * RegularExpression Id.
     */
    int MAIOR = 43;
    /**
     * RegularExpression Id.
     */
    int MENOR_IGUAL = 44;
    /**
     * RegularExpression Id.
     */
    int MAIOR_IGUAL = 45;
    /**
     * RegularExpression Id.
     */
    int E = 46;
    /**
     * RegularExpression Id.
     */
    int OU = 47;
    /**
     * RegularExpression Id.
     */
    int NAO = 48;
    /**
     * RegularExpression Id.
     */
    int LBRACKET = 49;
    /**
     * RegularExpression Id.
     */
    int RBRACKET = 50;
    /**
     * RegularExpression Id.
     */
    int EQUALS = 51;
    /**
     * RegularExpression Id.
     */
    int DOT = 52;
    /**
     * RegularExpression Id.
     */
    int SLASH = 53;
    /**
     * RegularExpression Id.
     */
    int LPAREN = 54;
    /**
     * RegularExpression Id.
     */
    int RPAREN = 55;
    /**
     * RegularExpression Id.
     */
    int LETTER_ID = 56;
    /**
     * RegularExpression Id.
     */
    int LETTER_UPPER = 57;
    /**
     * RegularExpression Id.
     */
    int LETTER_LOWER = 58;
    /**
     * RegularExpression Id.
     */
    int DIGIT_ID = 59;
    /**
     * RegularExpression Id.
     */
    int SYMBOL_UND = 60;
    /**
     * RegularExpression Id.
     */
    int CONSTANTE_INTEIRA = 61;
    /**
     * RegularExpression Id.
     */
    int CONSTANTE_REAL = 62;
    /**
     * RegularExpression Id.
     */
    int CONSTANTE_LITERAL = 63;
    /**
     * RegularExpression Id.
     */
    int IDENTIFICADOR = 64;
    /**
     * RegularExpression Id.
     */
    int IDENTIFICADOR_INVALIDO = 65;
    /**
     * RegularExpression Id.
     */
    int CONSTANTE_LITERAL_INVALIDA = 66;
    /**
     * RegularExpression Id.
     */
    int SIMBOLO_INVALIDO = 73;

    /**
     * Lexical state.
     */
    int DEFAULT = 0;
    /**
     * Lexical state.
     */
    int IN_COMMENT = 1;
    /**
     * Lexical state.
     */
    int singlelinecomment = 2;

    /**
     * Literal token values.
     */
    String[] tokenImage = {
            "<EOF>",
            "\" \"",
            "\"\\t\"",
            "\"\\n\"",
            "\"\\r\"",
            "\"\\f\"",
            "\"program\"",
            "\"this\"",
            "\"execute\"",
            "\"purpose\"",
            "\"declare\"",
            "\"type\"",
            "\"is\"",
            "\"constant\"",
            "\"and\"",
            "\"variable\"",
            "\"as\"",
            "\"integer\"",
            "\"real\"",
            "\"string\"",
            "\"logic\"",
            "\"assign\"",
            "\"to\"",
            "\"acquire\"",
            "\"write\"",
            "\"show\"",
            "\"carry\"",
            "\"true\"",
            "\"untrue\"",
            "\"check\"",
            "\"result\"",
            "\"put\"",
            "\"out\"",
            "\"+\"",
            "\"-\"",
            "\"*\"",
            "\"**\"",
            "\",\"",
            "\"%\"",
            "\"%%\"",
            "\"==\"",
            "\"!=\"",
            "\"<<\"",
            "\">>\"",
            "\"<<=\"",
            "\">>=\"",
            "\"&\"",
            "\"|\"",
            "\"!\"",
            "\"[\"",
            "\"]\"",
            "\"=\"",
            "\".\"",
            "\"/\"",
            "\"(\"",
            "\")\"",
            "<LETTER_ID>",
            "<LETTER_UPPER>",
            "<LETTER_LOWER>",
            "<DIGIT_ID>",
            "<SYMBOL_UND>",
            "<CONSTANTE_INTEIRA>",
            "<CONSTANTE_REAL>",
            "<CONSTANTE_LITERAL>",
            "<IDENTIFICADOR>",
            "<IDENTIFICADOR_INVALIDO>",
            "<CONSTANTE_LITERAL_INVALIDA>",
            "\"/*\"",
            "\"*/\"",
            "<token of kind 69>",
            "\"//\"",
            "<token of kind 71>",
            "<token of kind 72>",
            "<SIMBOLO_INVALIDO>",
    };

}
